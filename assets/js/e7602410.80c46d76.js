"use strict";(self.webpackChunklinkis_web_apache=self.webpackChunklinkis_web_apache||[]).push([[98030],{3905:(e,n,i)=>{i.d(n,{Zo:()=>p,kt:()=>d});var t=i(67294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function s(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?s(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):s(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function o(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)i=s[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)i=s[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var c=t.createContext({}),l=function(e){var n=t.useContext(c),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(i),d=r,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||s;return i?t.createElement(g,a(a({ref:n},p),{},{components:i})):t.createElement(g,a({ref:n},p))}));function d(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=i.length,a=new Array(s);a[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var l=2;l<s;l++)a[l]=i[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}m.displayName="MDXCreateElement"},34275:(e,n,i)=>{i.r(n),i.d(n,{contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=i(87462),r=(i(67294),i(3905));const s={title:"How to register a new microservice",sidebar_position:5.3},a="How to register a new microservice",o={unversionedId:"deployment/new-microservice",id:"deployment/new-microservice",isDocsHomePage:!1,title:"How to register a new microservice",description:"This article describes how to register a new microservice during local debugging and in the Linux environment to facilitate more lightweight learning, use and debugging.",source:"@site/docs/deployment/new-microservice.md",sourceDirName:"deployment",slug:"/deployment/new-microservice",permalink:"/docs/1.3.1/deployment/new-microservice",editUrl:"https://github.com/apache/incubator-linkis-website/edit/dev/docs/deployment/new-microservice.md",tags:[],version:"current",sidebarPosition:5.3,frontMatter:{title:"How to register a new microservice",sidebar_position:5.3},sidebar:"tutorialSidebar",previous:{title:"Involve Knife4j",permalink:"/docs/1.3.1/deployment/involve-knife4j"},next:{title:"Overview",permalink:"/docs/1.3.1/user-guide/overview"}},c=[{value:"1 Register a new microservice locally",id:"1-register-a-new-microservice-locally",children:[]},{value:"1.1 Create a new linkis-new-microservices submodule",id:"11-create-a-new-linkis-new-microservices-submodule",children:[]},{value:"Here is the pom.xml under the new module",id:"here-is-the-pomxml-under-the-new-module",children:[{value:"1.2 Code Development",id:"12-code-development",children:[]},{value:"1.3 Start the eureka service",id:"13-start-the-eureka-service",children:[]},{value:"1.4 Start the linkis-new-microservices service",id:"14-start-the-linkis-new-microservices-service",children:[]},{value:"1.5 Postman for interface debugging",id:"15-postman-for-interface-debugging",children:[]}]},{value:"2. Register new microservices in linux environment",id:"2-register-new-microservices-in-linux-environment",children:[{value:"2.1 Linux server",id:"21-linux-server",children:[]},{value:"2.5 Installation package preparation",id:"25-installation-package-preparation",children:[]},{value:"2.6 Upload the installation package to the server",id:"26-upload-the-installation-package-to-the-server",children:[]}]}],l={toc:c};function p(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},l,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-register-a-new-microservice"},"How to register a new microservice"),(0,r.kt)("p",null,"This article describes how to register a new microservice during local debugging and in the Linux environment to facilitate more lightweight learning, use and debugging."),(0,r.kt)("h3",{id:"1-register-a-new-microservice-locally"},"1 Register a new microservice locally"),(0,r.kt)("p",null,"This section documents how to configure and register a new microservice belonging to linkis in IDEA"),(0,r.kt)("p",null,"Mind mapping:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201465730-f957c767-539b-4cce-9ffc-907b791f169c.png",alt:"image"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Hardware requirements")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"jdk1.8"),(0,r.kt)("li",{parentName:"ul"},"maven3.5+")),(0,r.kt)("h3",{id:"11-create-a-new-linkis-new-microservices-submodule"},"1.1 Create a new linkis-new-microservices submodule"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": Under what module to create a new submodule, this is not fixed depending on the situation, here is just an example."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Right mouse button under the linkis-public-enhancements module")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201453748-0b8ada31-7190-4817-a1a2-32ba20db3743.png",alt:"image"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Select maven and click Nex Next")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201453787-55983124-c6b9-4893-89dd-e7542a27ef5e.png",alt:"image"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Enter the module name and click Finsh")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201453852-8d8a9364-4b00-418f-aee8-98fbc39020dd.png",alt:"image"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"created successfully")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201453947-b029d666-d1dc-49a3-a49f-df8c9260b5da.png",alt:"image"})),(0,r.kt)("h4",{id:"111-modify-the-pomxml-file-of-the-linkis-new-microservice-module"},"1.1.1 Modify the pom.xml file of the linkis-new-microservice module"),(0,r.kt)("h2",{id:"here-is-the-pomxml-under-the-new-module"},"Here is the pom.xml under the new module"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"path"),": linkis-public-enhancements/linkis-new-microservice/pom.xml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"## \u6dfb\u52a0\u4f9d\u8d56\n  <dependency>\n      <groupId>org.apache.linkis</groupId>\n      <artifactId>linkis-module</artifactId>\n      <version>${project.version}</version>\n      <exclusions>\n        <exclusion>\n          <groupId>org.ow2.asm</groupId>\n          <artifactId>asm</artifactId>\n        </exclusion>\n      </exclusions>\n  </dependency>\n\n  <dependency>\n      <groupId>org.apache.linkis</groupId>\n      <artifactId>linkis-mybatis</artifactId>\n      <version>${project.version}</version>\n  </dependency>\n")),(0,r.kt)("h4",{id:"112-added-linkis-new-microserviceproperties-file"},"1.1.2 Added linkis-new-microservice.properties file"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"path"),": linkis-dist/package/conf/linkis-new-microservices.properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties"},'# \n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the "License"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n# http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n\n##restful\nwds.linkis.server.restful.scan.packages=org.apache.linkis.newmicroservice.server.restful  ## \u5982\u4e0d\u9700\u63d0\u4f9b\u63a5\u53e3Api\u5219\u65e0\u9700\u6dfb\u52a0\u6b64\u914d\u7f6e\n\n##mybatis\nwds.linkis.server.mybatis.mapperLocations=classpath*:org/apache/linkis/newmicroservices/server/dao/mapper/*.xml \nwds.linkis.server.mybatis.typeAliasesPackage=org.apache.linkis.newmicroservices.server.domain\nwds.linkis.server.mybatis.BasePackage=org.apache.linkis.newmicroservices.server.dao\n\n\n\n##Spring\nspring.server.port=9208 #Never use the same port as other services\n\n')),(0,r.kt)("h4",{id:"113-modify-distributionxml"},"1.1.3 Modify distribution.xml"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"path"),": linkis-dist/src/main/assembly/distribution.xml"),(0,r.kt)("p",null,"Add fileSet configuration, changing the configuration is mainly to control the output linkis-new-microservice service package when compiling and packaging"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201454790-2c8ceade-91fe-43af-b69f-ad47fdb4b6b5.png",alt:"image"})),(0,r.kt)("p",null,"Only the configuration content that needs to be added is posted here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\n   <fileSet>\n            <directory>\n                ../linkis-public-enhancements/linkis-new-microservice/target/out/lib\n            </directory>\n            <outputDirectory>\n                linkis-package/lib/linkis-public-enhancements/linkis-new-microservice\n            </outputDirectory>\n            <includes>\n                <include>**/*</include>\n            </includes>\n   </fileSet>\n\n")),(0,r.kt)("h4",{id:"114-modify-linkisproperties-configuration"},"1.1.4 Modify linkis.properties configuration"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"path"),": linkis-dist/package/conf/linkis.properties"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201456815-5d377a91-69ac-494e-9b76-f5d6393faf44.png",alt:"image"})),(0,r.kt)("p",null,"Only the configuration content that needs to be added is posted here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties"},"\nwds.linkis.test.mode=true #Since the interface debugging needs to be carried out later, it needs to be changed to the test mode here\n\n")),(0,r.kt)("h3",{id:"12-code-development"},"1.2 Code Development"),(0,r.kt)("p",null,"To make it easier for everyone to learn, let's take creating a simple API interface as an example."),(0,r.kt)("h4",{id:"121-new-newmicroservice-class"},"1.2.1 New NewMicroservice class"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201456425-242e2146-05ba-485c-81e4-3f432051b765.png",alt:"image"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Class"},'package org.apache.linkis.newmicroservice.server.restful;\n\n\nimport io.swagger.annotations.ApiOperation;\nimport org.apache.linkis.server.Message;\nimport org.springframework.web.bind.annotation.*;\n\nimport io.swagger.annotations.Api;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Api(tags = "newMicroservices")\n@RestController\n@RequestMapping(path = "/newMicroservices")\npublic class NewMicroservice {\n\n\n    @ApiOperation(value = "establish", httpMethod = "GET")\n    @RequestMapping(path = "establish", method = RequestMethod.GET)\n    public Message list() {\n        Map&lt;String,String&gt; map=new HashMap&lt;&gt;();\n        map.put("NewMicroservice","Hello! This is a new microservice I registered(\u8fd9\u662f\u6211\u6ce8\u518c\u7684\u4e00\u4e2a\u65b0\u7684\u5fae\u670d\u52a1)");\n        return Message.ok("").data("map", map);\n    }\n\n}\n')),(0,r.kt)("h4",{id:"122-create-a-new-linkisnewmicroserviceapplication-startup-class"},"1.2.2 Create a new LinkisNewMicroserviceApplication startup class"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201456437-25d5280d-44e0-47fb-961f-1243d656092f.png",alt:"image"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Class"},'\npackage org.apache.linkis.newmicroservice.server;\n\nimport org.apache.linkis.LinkisBaseServerApp;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\npublic class LinkisNewMicroserviceApplication {\n\n  private static final Log logger = LogFactory.getLog(LinkisNewMicroserviceApplication.class);\n\n  public static void main(String[] args) throws ReflectiveOperationException {\n    logger.info("Start to running LinkisNewMicroservicesApplication");\n    LinkisBaseServerApp.main(args);\n  }\n}\n')),(0,r.kt)("h3",{id:"13-start-the-eureka-service"},"1.3 Start the eureka service"),(0,r.kt)("p",null,"The specific guidelines for this step have been written in the ",(0,r.kt)("a",{parentName:"p",href:"../development/debug"},"Debugging Guide")," document and can be accessed directly, so I will not introduce too much here."),(0,r.kt)("h3",{id:"14-start-the-linkis-new-microservices-service"},"1.4 Start the linkis-new-microservices service"),(0,r.kt)("p",null,"Set the startup Application of linkis-new-microservices"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201056682-660ecc73-e141-426c-8911-b52a744c975e.png",alt:"image"})),(0,r.kt)("p",null,"Parameter explanation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"[Service Name]\nlinkis-new-microservices\n\n[Module Name]\nlinkis-new-microservices\n\n[VM Opitons]\n-DserviceName=linkis-new-microservices -Xbootclasspath/a:{YourPathPrefix}/incubator-linkis/linkis-dist/package/conf \n\n[main Class]\norg.apache.linkis.newmicroservices.server.LinkisNewMicroservicesApplication\n\n[Add provided scope to classpath]\nBy checking Include dependencies with \u201cProvided\u201d scope, you can introduce provided-level dependency packages during debugging.\n")),(0,r.kt)("p",null,"After the above settings are completed, the Application can be run directly. After running successfully, open the browser and enter the url of the eureka registration center"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-url"},"    http://ip:port/ \n")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201058281-c73f99b5-71cf-4cfe-aded-ec2f5f35f447.png",alt:"image"})),(0,r.kt)("p",null,"When the linkis-new-microservices service appears in the eureka registry, the new microservice is successfully registered locally."),(0,r.kt)("h3",{id:"15-postman-for-interface-debugging"},"1.5 Postman for interface debugging"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"URL"),": http://ip:port/api/rest_j/v1/newMicroservices/establish"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201456985-f857d824-d8e9-4b84-9db4-e50cc647288d.png",alt:"image"})),(0,r.kt)("h2",{id:"2-register-new-microservices-in-linux-environment"},"2. Register new microservices in linux environment"),(0,r.kt)("h3",{id:"21-linux-server"},"2.1 Linux server"),(0,r.kt)("p",null,"hardware requirements\nInstall nearly 10 linkis microservices, at least 3G memory. **The default jvm -Xmx memory size of each microservice is 512M (if the memory is not enough, you can try to reduce it to 256/128M, and you can also increase it if the memory is enough)"),(0,r.kt)("h4",{id:"22-add-linkis-new-microservice-file"},"2.2 Add linkis-new-microservice file"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201459625-76b0de2d-8869-48fc-8899-1779fcc5a100.png",alt:"image"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'\n#!/usr/bin/env bash\n#\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the "License"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n# http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# description:  manager start cmd\n#\n# Modified for Linkis 1.0.0\n\n\nexport SERVER_SUFFIX="linkis-public-enhancements/linkis-new-microservice"\n\n\nexport SERVER_CLASS=org.apache.linkis.newmicroservice.server.LinkisNewMicroserviceApplication\n\n#export DEBUG_PORT=\n\nexport COMMON_START_BIN=$LINKIS_HOME/sbin/ext/linkis-common-start\nif [[ ! -f "${COMMON_START_BIN}" ]]; then\n    echo "The $COMMON_START_BIN  does not exist!"\n    exit 1\nelse\n    sh $COMMON_START_BIN\nfi\n\n')),(0,r.kt)("h4",{id:"23-linkis-start-allsh-configuration-modification"},"2.3 linkis-start-all.sh configuration modification"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"path"),": linkis-dist/package/sbin/linkis-start-all.sh"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201459497-7c2e0752-5c85-4f79-a183-c7c3e83a2380.png",alt:"image"})),(0,r.kt)("p",null,"Only the configuration content that needs to be added is posted here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'    ## startup script\n    #linkis-new-microservice\n    SERVER_NAME="new-microservice" \n    startApp\n\n    ## detection script\n    #linkis-new-microservice\n    SERVER_NAME="new-microservice"\n    checkServer\n')),(0,r.kt)("h4",{id:"24-linkis-stop-allsh-configuration-modification"},"2.4 linkis-stop-all.sh configuration modification"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"path"),":linkis-dist/package/sbin/linkis-stop-all.sh"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201459539-cf0eafea-10f6-424f-b2d3-670faf1d46d5.png",alt:"image"})),(0,r.kt)("p",null,"Only the configuration content that needs to be added is posted here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'    ## stop script\n    #linkis-new-microservice\n    export SERVER_NAME="new-microservice"\n    stopApp\n')),(0,r.kt)("h3",{id:"25-installation-package-preparation"},"2.5 Installation package preparation"),(0,r.kt)("p",null,"The specific guidelines for this step have been written in the ",(0,r.kt)("a",{parentName:"p",href:"../development/build"},"backend compilation")," document and can be accessed directly, so I won't introduce too much here."),(0,r.kt)("h3",{id:"26-upload-the-installation-package-to-the-server"},"2.6 Upload the installation package to the server"),(0,r.kt)("p",null,"Here is an example of single-machine deployment, and the specific instructions of this step have been written in the ",(0,r.kt)("a",{parentName:"p",href:"../deployment/deploy-quick"},"Single-machine deployment")," document and can be accessed directly, so I won\u2019t introduce too much here."),(0,r.kt)("p",null,"When the installation and deployment are successful, you can directly access the eureka registration center in the browser to see whether the center has successfully registered the linkis-new-microservices service. If the registration is successful, the creation of a new microservice is successful."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/106590848/201459777-c41f3631-c434-4318-b7ca-dc92e75e721b.png",alt:"Microservices"})))}p.isMDXComponent=!0}}]);